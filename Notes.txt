Note, at this point there was a problem with titled players. It's matching the player name, like fins, to get the page. But then in the game score it's listed as im fins. So for now I just check if the entered name is in the white player's name. This could be a problem if fins plays against someone named fins234 for example. Will have to work on that. 
  Probably like a check where if there is a space in the name, split it at "m " and take the [1] element. That will work, but first ask if a space is in it. Will need to add a fx that takes the name, saves it, and then does that processing. That actually shouldn't be too bad. 

But right now it works with the last 12 games. That's what loads on it's own on the rated page. 

To make this more robust and add more features learn selenium next. 

TODO: break main class into smaller functions
TODO: redo all names

The idea in line 2 is perfect. It's absolutely infuriating that it won't work. It won't find the space in the string accurately, even tho it works with any other string. But when I check 
" " in name it doesn't work. I print the name and it's right. I check for "m" and it works. It just won't check for the blank space. But split works so it sees the space. There is literally no reason why it won't work as originally written. The logic is perfectly sound. All tests work. It's only when I check for " " in the name it doesn't work. But any other number of tests and it works exactly as planned exactly as written. It only won't work for that one moment. Google was no help. 
So I found another way to make it work, but I hate it. I'm so mad that it won't work as it should. It makes no sense. 

Issue: Game in progress -> fixed Just skip that game

Issue: Rated games may be variants. But if we skip all those, we may end up with no games. Same problem as the classical only filter. Because it only loads first 12

Add a string to toggle that says like 'last 12 games' vs 'last 12 classical' depending on the type of search


Maybe this can be expanded to add a word cloud for the openings. So i split the print output out and only use it if it's dunder main. My idea is, if I do that word cloud, I can import this code for the scout class and use it to gather all the same info. The only difference will be in how and where it is printed. 

Just took out all the Beautiful Soup stuff. It was a good learning experience, and I'm glad to be familiar with it now. There are definitely applications for that. 
But in this program I just don't need it. Regex is really what I was looking for combined with the very good lichess games api. 

Some Ideas:
1. Take the urls and put them in a plain text file. The build_urls_dict will just take that simple file and load it, then will a regex check for the start, like "classical_string=" and then take the whole rest (which is the url). That could keep that low level implementation out of the class. And no matter how many urls I add they are in a place and not mucking up the look of the main code
2. take the Scout class and put it in a Scout.py file that is imported into main. Is it that easy, and if so would that be better to isolate each of those things into a module? Just to stay separate and clean? The issue may be that then, like the data class I made for chess score has to be imported into each file. Do I really wanted to jsut keep adding import statements as I move these things around? Is that better?
3. Add a "fast, blitz, quick" option that gives the blitz and bullet games. Why not? Rated is all. Classical. Blitz. Basically fast, slow, or all are the major categories. 